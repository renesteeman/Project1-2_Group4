plugins {
    id 'java'
    id 'application'

    id "org.sonarqube" version "2.7"
    id 'net.nemerosa.versioning' version '2.6.1'

    id 'org.openjfx.javafxplugin' version '0.0.8'
}

javafx {
    version = "14"
    modules = [ 'javafx.controls' ]
}

group 'org.example'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.11

repositories {
    jcenter()
    mavenCentral()
	maven {
   		url "https://oss.sonatype.org/content/repositories/snapshots/"
	}
	maven {
		url "https://raw.github.com/SpinyOwl/repo/releases"
	}
	maven {
		url "https://raw.github.com/SpinyOwl/repo/snapshots"    	
	}
	maven {
		url "http://www.astrogrid.org/maven/docsTempSchema/javaapp/org/netbeans/lib/awtextra/"
	}
}

project.ext.lwjglVersion = "3.2.3"
project.ext.jomlVersion = "1.9.24"
project.ext.lwjglNatives = "natives-linux"

def legui_version = '2.2.2'

dependencies {
	// https://mvnrepository.com/artifact/slick-util/slick-util
	compile group: 'slick-util', name: 'slick-util', version: '1.0.0'

	compile group: 'org.netbeans.external', name: 'AbsoluteLayout', version: 'RELEASE113'

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.0.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.0.3'

    implementation "org.joml:joml:$jomlVersion"
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    // https://mvnrepository.com/artifact/org.l33tlabs.twl/pngdecoder
    compile group: 'org.l33tlabs.twl', name: 'pngdecoder', version: '1.0'

    implementation 'com.google.guava:guava:27.0.1-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'

    compile group: 'org.l33tlabs.twl', name: 'pngdecoder', version: '1.0'

    // LEGUI - SNAPSHOT - https://github.com/SpinyOwl/legui
    compile group: 'org.liquidengine', name: 'legui', version: legui_version + '-SNAPSHOT', changing: true;
	
	// https://mvnrepository.com/artifact/org.l33tlabs.twl/pngdecoder
   	compile group: 'org.l33tlabs.twl', name: 'pngdecoder', version: '1.0'

	// LEGUI - SNAPSHOT - https://github.com/SpinyOwl/legui
	compile group: 'org.liquidengine', name: 'legui', version: legui_version + '-SNAPSHOT', changing: true;
	
	implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

	implementation "org.lwjgl:lwjgl"
	implementation "org.lwjgl:lwjgl-assimp"
	implementation "org.lwjgl:lwjgl-bgfx"
	implementation "org.lwjgl:lwjgl-cuda"
	implementation "org.lwjgl:lwjgl-egl"
	implementation "org.lwjgl:lwjgl-glfw"
	implementation "org.lwjgl:lwjgl-jawt"
	implementation "org.lwjgl:lwjgl-jemalloc"
	implementation "org.lwjgl:lwjgl-libdivide"
	implementation "org.lwjgl:lwjgl-llvm"
	implementation "org.lwjgl:lwjgl-lmdb"
	implementation "org.lwjgl:lwjgl-lz4"
	implementation "org.lwjgl:lwjgl-meow"
	implementation "org.lwjgl:lwjgl-nanovg"
	implementation "org.lwjgl:lwjgl-nfd"
	implementation "org.lwjgl:lwjgl-nuklear"
	implementation "org.lwjgl:lwjgl-odbc"
	implementation "org.lwjgl:lwjgl-openal"
	implementation "org.lwjgl:lwjgl-opencl"
	implementation "org.lwjgl:lwjgl-opengl"
	implementation "org.lwjgl:lwjgl-opengles"
	implementation "org.lwjgl:lwjgl-openvr"
	implementation "org.lwjgl:lwjgl-opus"
	implementation "org.lwjgl:lwjgl-par"
	implementation "org.lwjgl:lwjgl-remotery"
	implementation "org.lwjgl:lwjgl-rpmalloc"
	implementation "org.lwjgl:lwjgl-shaderc"
	implementation "org.lwjgl:lwjgl-sse"
	implementation "org.lwjgl:lwjgl-stb"
	implementation "org.lwjgl:lwjgl-tinyexr"
	implementation "org.lwjgl:lwjgl-tinyfd"
	implementation "org.lwjgl:lwjgl-tootle"
	implementation "org.lwjgl:lwjgl-vma"
	implementation "org.lwjgl:lwjgl-vulkan"
	implementation "org.lwjgl:lwjgl-xxhash"
	implementation "org.lwjgl:lwjgl-yoga"
	implementation "org.lwjgl:lwjgl-zstd"
	runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-bgfx::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-jemalloc::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-libdivide::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-llvm::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-lmdb::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-lz4::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-meow::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-nanovg::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-nfd::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-nuklear::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-opengles::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-openvr::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-opus::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-par::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-remotery::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-rpmalloc::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-shaderc::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-sse::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-tinyexr::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-tinyfd::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-tootle::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-vma::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-xxhash::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-yoga::$lwjglNatives"
	runtimeOnly "org.lwjgl:lwjgl-zstd::$lwjglNatives"
	implementation "org.joml:joml:${jomlVersion}"
}

test {
    // Enable JUnit 5 (Gradle 4.6+).
    useJUnitPlatform()

    // Always run tests, even when nothing changed.
    dependsOn 'cleanTest'

    // Show test results.
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Define the main class for the application
mainClassName = 'FeatureTester.FeatureTester'

task(runMenu, dependsOn: 'classes', type: JavaExec) {
    main = 'MainGame.MainMenu'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task(runSoftware, dependsOn: 'classes', type: JavaExec) {
    main = 'MainGame.MainGame'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task(run2d, dependsOn: 'classes', type: JavaExec) {
    main = 'MainGame.CrazyPutting'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task(helloLegui, dependsOn: 'classes', type: JavaExec) {
    main = 'legui.HelloLegui'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}

task(runMastermind, dependsOn: 'classes', type: JavaExec) {
    main = 'AI.Mastermind'
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
}